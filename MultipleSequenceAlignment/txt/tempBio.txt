import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;

public class Test {

	static int [][] blosum62 = new int[24][24];
	static int line = 0;
	static int line2 = 0;
	static int sequence = 0;
	static int name_sequence=0;
	static String[] s = new String[6];
	static String[] sNames = new String[6];
	static String[] whichBlosumColumn = new String[24];
	
	public static void readFile(File inputFile) {
		BufferedReader brInput = null;
		try {
			brInput = new BufferedReader(new FileReader(inputFile));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		
		String st; 
		  try {
			while ((st = brInput.readLine()) != null){ 
				  if(line%2==0) {
					  st=st.substring(1);
					  if(st.length()>5) {
						  sNames[name_sequence] = st.substring(0, 5);
					  }
					  else if(st.length()<5) {
						  for (int i = 0; i < 6-st.length(); i++) {
							st+=" ";
						}
						  sNames[name_sequence] = st;
					  }
					  else if((st.length()==5)) {
						  sNames[name_sequence] = st;
					  }
					  
					  name_sequence++;
					  
				  }
				  if (line%2==1) {
					  //System.out.println(st);
					  s[sequence] = st;
					  sequence++;
				  }
				  line++;
					 
			  }
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
    public static void readBlosum(File blosumFile) {
    	  BufferedReader brBlosum = null;
  		try {
  			brBlosum = new BufferedReader(new FileReader(blosumFile));
  		} catch (FileNotFoundException e) {
  			// TODO Auto-generated catch block
  			e.printStackTrace();
  		} 
  		String st2; 
  		int rowBlosum = -1;
		int columnBlosum = 0;
		int a = 0;
		  try {
			while ((st2 = brBlosum.readLine()) != null){ 
				  
				  String[] d2 = st2.split(" ");
				  if(rowBlosum<0) {
					  for (int i = 0; i < d2.length; i++) {
						if(d2[i].length()>0) {
							whichBlosumColumn[a]=d2[i];
							a++;
						}
					}
				  }
				  else {
					  for (int i = 0; i < d2.length; i++) {
							 if(d2[i].length()>0 && i>1){
								 blosum62[rowBlosum][columnBlosum] = Integer.valueOf(d2[i]);
								 columnBlosum++;
							 }
						} 
				  }
				  //System.out.println();
				  rowBlosum++;	
				  columnBlosum= 0;
					 
			  }
		   } catch (NumberFormatException | IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
		 
	}
    public static int getScoreBlosum(char val1,char val2){
		int scoreB= 0;
		
		 
		  int value1=0;
		  int value2=0;
		  for (int i = 0; i < whichBlosumColumn.length; i++) {
			
			  if(whichBlosumColumn[i].equals(String.valueOf(val1))){
				  value1=i;
			  }
			  if(whichBlosumColumn[i].equals(String.valueOf(val2))){
				  value2=i;
			  }
		}
		  
		scoreB = blosum62[value1][value2];
		System.out.print(val1 +" and "+val2+" ");
		System.out.println("score:"+scoreB);
		
		return scoreB;
	}
    public static double scoreIdentical(String s1Name,String s2Name,String s1, String s2){
		double identical = 0.0;
		String similarityPosition ="";
        int similarity = 0;
		
		for (int i = 0; i < s1.length(); i++) {
			for (int j = 0; j < s2.length(); j++) {
				if(i==j){
					if (s1.substring(i, i+1).equalsIgnoreCase(s2.substring(j, j+1))){
						similarity++;
						similarityPosition +="+";
					}
					else {
						similarityPosition +="-";
					}
				}
				
			}
		}
		int tot = s1.length();
		identical = ((double)similarity / tot);
		String ide = String.format("%.3f", identical);
		ide = ide.substring(0,1)+"."+ide.substring(2);
		System.out.println(s1Name+":"+s1);
		System.out.println(s2Name+":"+s2);
		for (int i = 0; i < s1Name.length()+1; i++) {
			System.out.print(" ");
		}
		System.out.println(similarityPosition);
		double percent = Double.parseDouble(ide);
		System.out.println("similarity "+s1Name+"-"+s2Name+": "+similarity+"/"+tot+" %"+String.format("%.3f",identical)+" identical");
		return percent;
	}
    
    public static void printBlosumTable() {
    	
    
		 System.out.print("    ");
		 for (int i = 0; i < whichBlosumColumn.length; i++) {
		     System.out.print(whichBlosumColumn[i]+"--|");
	     }
		 System.out.println();
		
		for (int i = 0; i < blosum62.length; i++) {
			System.out.print(whichBlosumColumn[i]+"--|");
			for (int j = 0; j < blosum62.length; j++) {
				if(blosum62[i][j]<0 || blosum62[i][j]>9) {
					System.out.print(blosum62[i][j]+" |");
				}
				else {
					System.out.print(blosum62[i][j]+"  |");
				}
				
			}
			System.out.println();
		}
    	
    }
    
	public static void main(String[] args) throws IOException {
	
		
		File inputFile = new File("./txt/Input0.txt");
		File blosumFile = new File("./txt/Blosum62.txt");
		readBlosum(blosumFile);
		readFile(inputFile);
		
		for (int i = 0; i < sequence; i++) {
			System.out.println(sNames[i]+": "+s[i]);
		 }
		System.out.println();
		// printBlosumTable();
		 
		// getScoreBlosum('*', '*');
		 /*
		for (int i = 0; i < sequence; i++) {
			for (int j = 0; j < sequence; j++) {
				if(j>i) {
					scoreIdentical(sNames[i],sNames[j],s[i], s[j]);
					System.out.println();
				}
			}
		}
		 */
	
	}
	

	

}
